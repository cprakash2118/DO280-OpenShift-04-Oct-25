https://github.com/cprakash2118/DO280-OpenShift-04-Oct-25

Multicloud Container Development Platforms:-
https://reprints2.forrester.com/#/assets/2/431/RES178526/report
https://reprint.forrester.com/reports/the-forrester-wavetm-multicloud-container-platforms-q3-2025-f3367e46/index.html


###Point-1-)
- Product Name - "Red Hat OpenShift" 
  1-) Cloud services editions
   - Red Hat OpenShift Service on AWS        [PlatformsUsed=AWS Cloud;POC=Amazon] - ROSA
   - Microsoft Azure Red Hat OpenShift       [PlatformsUsed=Azure Cloud;POC=Microsoft Azure] - ARO
   - Red Hat OpenShift Dedicated             [PlatformsUsed=AWS/GCP cloud;POC=RedHat]
   - Red Hat OpenShift on IBM Cloud          [PlatformsUsed=IBM Cloud;POC=IBM]
  
  2-) Self-managed editions
   - Red Hat OpenShift Kubernetes Engine     [Basic;RHOKE]
   - Red Hat OpenShift Container Platform    [Standard;RHOCP]
   - Red Hat OpenShift Platform Plus         [Add-on Service ; RHOPP]
   - Red Hat OpenShift Virtualization Engine [Add-On;RHOV] - KubeVirt Based.
   
  3-) Services & add-ons
   - Red Hat OpenShift AI                                [AI/ML workload]
   - Red Hat OpenShift Lightspeed                        
   - Red Hat OpenShift Virtualization                    [RHOV-KubeVirt]
   - Red Hat Quay                                        [Registry]
   - Red Hat Advanced Cluster Management for Kubernetes  [RHACM]
   - Red Hat Advanced Cluster Security for Kubernetes    [RHACS]
   - Red Hat Advanced Developer Suite
   - Red Hat OpenShift Consulting

https://www.redhat.com/en/resources/openshift-skill-paths-datasheet

###Point-2-)
Table of Contents (TOC):-
1. Declarative Resource Management  
  - Resource Manifest 
  - Kustomization & Overlay 

2. Deploy Packaged Applications 
  - Via Red Hat OpenShift Templates 
  - Helm Chart

3. Authentication and Authorization
  - Authentication via Oauth/Client-Certificate, Identity Provider (IdP-htpasswd)
    FYI-Identity Provider - HTpasswd,LDAP,OpenIDConnect (OIDC) etc 
  - Authorization via Role Based Access Control (RBAC).

4. Network Security  
  - Basic networking (CNI - Container Network Interface)
  - Protect External Traffic with TLS 
  - Configure Network Policies 
  - Protect Internal Traffic with TLS 

5. Expose non-HTTP/SNI Applications 
  - Load Balancer Services 
  - Multus Secondary Networks (Another CNI; Default CNI-OVNKubernetes).

6. Enable Developer Self-Service  
  - LimitRange 
  - ResourceQuota 
  - Custom Template 

7. Manage Kubernetes Operators 
  - Operators 
  - Web Console to install Operators
  - CLI to install Operators
  
8. Application Security
 - Control Application Permissions with Security Context Constraints 
 - Allow Application Access to Kubernetes APIs 
 - Cluster and Node Maintenance with Kubernetes Cron Jobs 

9.  OpenShift Updates
 - The Cluster Update Process 
 - Detect Deprecated Kubernetes API Usage 
 - Update Operators with the OLM 
 - OpenShift Updates
 

###Point-3-)
- Classroom Environment:-
  1-) Users details:-
    Login to VMs/Servers:-
	 student/student  [Sudo access] 
	 root/redhat 
	
	*********************** Below points belongs to only Oauth service - Start here ***************************
	FYI- Ouath is an Identity Broker, which provides Authorization.
	Eg:- It mean ssh login is authentication and sudo access is authorization.
	
	Login to OCP cluster:-
	 admin/redhatocp  [cluster-admin account; It means same as root account w.r.t Linux]
	 developer/developer [basic User]
	 FYI- Both are LDAP user.
	 
	 kubeadmin/kubeadmin-password-file [On utility node, location=/home/lab/ocp4/auth/{kubeadmin-password,kubeconfig}
	 $ ssh root@utility [from workstation as student account]
	 # cd /home/lab/ocp4/auth/
	 # cat kubeadmin-password ; echo 
	 laksjdksaljdlaskjdlka
	 
	API URL - https://api.clusterName.baseDomain:6443 
    Web COnsole - https://appName-nsName.apps.clusterName.baseDomain
   
	As per our LAB env:- 
	   clusterName=ocp4 
	   baseDomain=example.com 
	   appName=console 
	   nsName=openshift-console 
	
	API URL - https://api.ocp4.example.com:6443 
	Web COnsole - https://console-openshift-console.apps.ocp4.example.com 
	
	
	API URL used by CLI login to OCP cluster via oc (openshift-client).
	Eg: $ oc login -u admin -p redhatocp https://api.ocp4.example.com:6443 
	    $ oc whoami 
		$ oc whoami -t 
		$ oc version 
		$ oc get nodes 
		$ oc get clusterversion 
			
	Web Console Login:-
	Web Browser -> https://console-openshift-console.apps.ocp4.example.com 
	Use "admin" as user and "redhatocp" as password.
  *********************** Above points belongs to only Oauth service - End here ***************************	
	
  Client Certificate authentication:-
  kubeconfig file 
  FYI- API URL, you can get from below command also:-
   # cat kubeconfig | grep server 
     https://api.ocp4.example.com:6443 

   $ ssh root@utility [from workstation as student account]
   # cd /home/lab/ocp4/auth/
   # ls 
   kubeadmin-password kubeconfig
   # scp kube* student@workstation:~/
   Student's password: student 
   # exit 
   $ ls 
   kubeadmin-password kubeconfig

   $ hostname -f ; pwd
   workstation.lab.example.com 
   /home/student 
  
 1- $ oc whoami --kubeconfig kubeconfig-file-location
    $ oc whoami --kubeconfig /home/student/kubeconfig

 2- 	
   $ env | grep KUBECONFIG 
   $ export KUBECONFIG=/home/student/kubeconfig
   $ env | grep KUBECONFIG
   KUBECONFIG=/home/student/kubeconfig  
   $ oc get nodes

 3- $ cp -rpv ~/kubeconfig ~/.kube/config 
    $ oc get nodes 
	
FYI- reset all - $ mv ~/.kube /tmp 
                 or 
				 $ rm -rf ~/.kube 

----------------

 2-) Network & Domain details:-
   
  Network Name                  Domain Name                       Network Range (CIDR)
  classroom Network            example.com                      172.25.252.0/24 
  student Network              lab.example.com                  172.25.250.0/24   (Eg: Accenture Network - gateway)
  Cluster Network              ocp4.example.com                 192.168.50.0/24   (Eg: ClientNetwork - citi.com)
  
 3-) VMs/Servers details:-
   workstation.lab.example.com      [Jump server, used for login to OCP cluster - RHEL GUI based server]
   bastion.lab.example.com          [Connect student network to classroom network]
   classroom.example.com            [Provide internet access - quay.io/registry.redhat.io etc]
   utility.lab.example.com          [Connect student network to OCP cluster network and provide below services]
                                    FYI- DNS,HAproxy,DHCP,PXE-KickStart,NFS-server,Apache, etc.
   master01.ocp4.example.com        [OCP master/worker nodes]
   registry.ocp4.example.com        [Used for git/registry etc]
   idm.ocp4.example.com             [LDAP server]
   

###Point-4-)
  Kubernetes Vs OpenShift:-
  
Kubernetes:- 
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
https://kubernetes.io/docs/setup/production-environment/container-runtimes/

Layer-06   End user applications(Banking/Telco etc)
Layer-05   Add on kubernetes services (Network;Storage;Minoting;logging etc)
Layer-04   Install Certified Kubernetes (version 1.31)
           kubelet;kube-apiserver;etcd;kube-controller-manager;kube-scheduler
		   systemd service - kubelet 
Layer-03   Install "Container RunTime" - Crio,Containerd, Docker, Mirantis COntainer RunTime
            systemd service - crio 
Layer-02   Installed Operating System (RHEL9).
layer-01   hardware;Virtualization;Cloud [Infra]


Red Hat OpenShift:-
--------------------------------------------------------------------------
Note: End user application can be deployed on RHOKE/RHOCP/RHOPP 

Layer-08   End user applications(Banking/Telco etc)
Layer-07   Rd Hat openshift Platform Plus (RHOPP - Add-On service).
Layer-06   Red Hat openshift Container Platform (RHOCP)
Layer-05   Red Hat openshift Kubernetes Engine (RHOKE)
Layer-04   Install Certified Kubernetes (version 1.31) - by openshift-installer 
           kubelet;kube-apiserver;etcd;kube-controller-manager;kube-scheduler
		   
		   OCP version 4.14 - k8s version 1.27 
		   OCP version 4.15 - k8s version 1.28 
		   .. 
		   OCP version 4.18 - k8s version 1.31 

Layer-03   Container RunTime (default=crio) - systemd service (running on all master/worker) - by openshift-installer
Layer-02   Installed Operating System - RHEL core OS (Not manually installed; installed by openshift-installer".
           openshift-installer with the help of ignition files [bootstrap.ign,master.ign,worker.ign]
layer-01   hardware;Virtualization;Cloud [Infra]  


*************************************************
- Login to OCP cluster:-
  Oauth via CLI  
  $ oc login -u admin -p redhatocp https://api.ocp4.example.com:6443 
  Oauth via Web Console
  admin/redhatocp -> https://console-openshift-console.apps.ocp4.example.com 
  
  Clinet-Certificate 
  Using "kubeconfig file" - methods 1,2,3 
  
Task Example:-
Create users access 
-user1 to user5 with password "redhat123"

Outcome must be like this.
$ oc login -u user1 -p redhat123 https://api.ocp4.example.com:6443  
Same should work for user1-5.

Step-1:-
$ htpasswd --help 
$ htpasswd -c -B -b htpasswd-file-name user1 redhat123 
$ htpasswd -B -b htpasswd-file-name user2 redhat123 
$ htpasswd -B -b htpasswd-file-name user3 redhat123
$ htpasswd -B -b htpasswd-file-name user4 redhat123
$ htpasswd -B -b htpasswd-file-name user5 redhat123


Step-2:- Create secret and inject this file inside the OCP cluster.
$ oc create secret generic secret-htpasswd --from-file htpasswd=htpasswd-file-name -n openshift-config 
or
$ oc create secret generic secret-htpasswd --from-file htpasswd=htpasswd-file-name -n openshift-config --dry-run=client -o yaml > mysecret.yaml 
$ oc create -f mysecret.yaml --save-config 

$ oc get secret secret-htpasswd  -n openshift-config
$ oc get secret secret-htpasswd  -n openshift-config -o yaml/json 


Step-3:-
$ oc get oauth cluster -o yaml > oauth.yaml
Note: - Making changes.
$ oc apply -f oauth.yaml
$ oc get pods -n openshift-authentication 
$ oc login -u user1 -p redhat123 https://api.ocp4.example.com:6443 






